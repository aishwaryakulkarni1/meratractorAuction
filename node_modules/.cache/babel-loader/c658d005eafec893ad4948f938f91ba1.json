{"ast":null,"code":"var a = [\"\", \"one \", \"two \", \"three \", \"four \", \"five \", \"six \", \"seven \", \"eight \", \"nine \", \"ten \", \"eleven \", \"twelve \", \"thirteen \", \"fourteen \", \"fifteen \", \"sixteen \", \"seventeen \", \"eighteen \", \"nineteen \"];\nvar b = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"];\nvar regex = /^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/;\nexport function numWords(num) {\n  if ((num = num.toString()).length > 9) {\n    throw new Error(\"overflow\"); // Does not support converting more than 9 digits yet\n  }\n\n  var n = (\"000000000\" + num).substr(-9).match(regex);\n  if (!n) return;\n  var str = \"\";\n  str += n[1] != 0 ? (a[Number(n[1])] || b[n[1][0]] + \" \" + a[n[1][1]]) + \"crore \" : \"\";\n  str += n[2] != 0 ? (a[Number(n[2])] || b[n[2][0]] + \" \" + a[n[2][1]]) + \"lakh \" : \"\";\n  str += n[3] != 0 ? (a[Number(n[3])] || b[n[3][0]] + \" \" + a[n[3][1]]) + \"thousand \" : \"\";\n  str += n[4] != 0 ? (a[Number(n[4])] || b[n[4][0]] + \" \" + a[n[4][1]]) + \"hundred \" : \"\";\n  str += n[5] != 0 ? (str != \"\" ? \"and \" : \"\") + (a[Number(n[5])] || b[n[5][0]] + \" \" + a[n[5][1]]) : \"\";\n  return str.trim();\n}","map":{"version":3,"sources":["g:\\meratractor-auction-master-1May2019\\src\\Helper.js"],"names":["a","b","regex","numWords","num","toString","length","Error","n","substr","match","str","Number","trim"],"mappings":"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","sourcesContent":["const a = [\n  \"\",\n  \"one \",\n  \"two \",\n  \"three \",\n  \"four \",\n  \"five \",\n  \"six \",\n  \"seven \",\n  \"eight \",\n  \"nine \",\n  \"ten \",\n  \"eleven \",\n  \"twelve \",\n  \"thirteen \",\n  \"fourteen \",\n  \"fifteen \",\n  \"sixteen \",\n  \"seventeen \",\n  \"eighteen \",\n  \"nineteen \"\n]\nconst b = [\n  \"\",\n  \"\",\n  \"twenty\",\n  \"thirty\",\n  \"forty\",\n  \"fifty\",\n  \"sixty\",\n  \"seventy\",\n  \"eighty\",\n  \"ninety\"\n]\n\nconst regex = /^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/\n\n export function numWords(num) {\n  if ((num = num.toString()).length > 9) {\n    throw new Error(\"overflow\") // Does not support converting more than 9 digits yet\n  }\n\n  const n = (\"000000000\" + num).substr(-9).match(regex)\n  if (!n) return\n\n  let str = \"\"\n  str +=\n    n[1] != 0\n      ? (a[Number(n[1])] || b[n[1][0]] + \" \" + a[n[1][1]]) + \"crore \"\n      : \"\"\n  str +=\n    n[2] != 0\n      ? (a[Number(n[2])] || b[n[2][0]] + \" \" + a[n[2][1]]) + \"lakh \"\n      : \"\"\n  str +=\n    n[3] != 0\n      ? (a[Number(n[3])] || b[n[3][0]] + \" \" + a[n[3][1]]) + \"thousand \"\n      : \"\"\n  str +=\n    n[4] != 0\n      ? (a[Number(n[4])] || b[n[4][0]] + \" \" + a[n[4][1]]) + \"hundred \"\n      : \"\"\n  str +=\n    n[5] != 0\n      ? (str != \"\" ? \"and \" : \"\") +\n        (a[Number(n[5])] || b[n[5][0]] + \" \" + a[n[5][1]])\n      : \"\"\n\n  return str.trim()\n}\n"]},"metadata":{},"sourceType":"module"}